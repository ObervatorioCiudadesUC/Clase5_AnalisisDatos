# Correr comandos: seleccionar + ctrl + enter
2 + 2
# Asignar informacion a una variable
cuatro <- 2 + 2
cuatro
# Crear un vector
mi_vector <- c(1, 2, 3, 4, 5, 6) # Vector numerico
mi_vector2 <- 1:6
mi_vector3 <- c(1:6, 10, 15, 20)
mi_vector4 <- c("uno", "dos", "tres", "cuatro", "cinco", "seis") # Vector de caracteres
mi_vector5 <- c(TRUE, FALSE, TRUE, TRUE, FALSE, TRUE) # Vector logico
mi_vector4 <- c("uno", "dos", "tres", "cuatro", "cinco", "seis") # Vector de caracteres
mi_vector5 <- c(TRUE, FALSE, TRUE, TRUE, FALSE, TRUE) # Vector logico
#Seleccionar elementos dentro del vector
mi_vector4[6]
mi_vector5[c(1, 3, 5)]
# Operaciones con vectores y variables
mi_vector * 4
mi_vector * cuatro
mi_vector3[8]*2
# Crear un dataframe
df <- data.frame(mi_vector4, mi_vector, mi_vector5)
# Explorar nuestros datos
head(df)
# Explorar nuestros datos
head(df, 10)
# Explorar nuestros datos
head(df, 2)
summary(df)
# Nueva variable a partir de nuestros datos
df$cuadrado <- df$mi_vector^2
# Nueva variable a partir de nuestros datos - uso signo $
df$cuadrado <- df$mi_vector^2
mean(df$mi_vector)
mean(df$cuadrado)
select(df, mi_vector, cuadrado)
library(tidyverse) # Limpieza y visualizacion de datos (dplyr + stringr + ggplot2 + tidyr + readr + purrr)
summarise(df,
media_mv = mean(mi_vector),
media_cuadrado = mean(cuadrado)
)
# Asignar modificaciones a un nuevo dataframe
df2 <- df %>%
# Verbo transmute - mutate con select
transmute(
year = 2017, # Crear variable año
var1 = cuadrado, # Renombrar variable cuadrado
par = if_else(var1 %% 2 == 0, TRUE, FALSE)
)
View(df2)
View(df)
df
# Uso de condicionales
df4 <- df3 %>%
mutate(
es_par = if_else(var1 %% 2 == 0, TRUE, FALSE), # Uso if_else, función condicional: ¿es var1 divisible por 2?
mayor_10 = if_else(var1 > 10, 1, 0), # Función condicional: ¿es var1 mayor a 10?
# Uso case_when - funcion condicional re-clasificación
categoria = case_when(
var1 < 10 ~ "Menor a 10",
var1 >= 10 & var1 < 20 ~ "Entre 10 y 20",
var1 >= 20 ~ "Mayor a 20"
TRUE ~ NA
)
)
# Uso de condicionales
df4 <- df3 %>%
mutate(
es_par = if_else(var1 %% 2 == 0, TRUE, FALSE), # Uso if_else, función condicional: ¿es var1 divisible por 2?
mayor_10 = if_else(var1 > 10, 1, 0), # Función condicional: ¿es var1 mayor a 10?
# Uso case_when - funcion condicional re-clasificación
categoria = case_when(
var1 < 10 ~ "Menor a 10",
var1 >= 10 & var1 < 20 ~ "Entre 10 y 20",
var1 >= 20 ~ "Mayor a 20",
TRUE ~ NA
)
)
# Verbo transmute (mutate + select)
df3 <- df %>%
transmute(
year = 2017,
var1 = cuadrado
)
# Uso de condicionales
df4 <- df3 %>%
mutate(
es_par = if_else(var1 %% 2 == 0, TRUE, FALSE), # Uso if_else, función condicional: ¿es var1 divisible por 2?
mayor_10 = if_else(var1 > 10, 1, 0), # Función condicional: ¿es var1 mayor a 10?
# Uso case_when - funcion condicional re-clasificación
categoria = case_when(
var1 < 10 ~ "Menor a 10",
var1 >= 10 & var1 < 20 ~ "Entre 10 y 20",
var1 >= 20 ~ "Mayor a 20",
TRUE ~ NA
)
)
# Uso de condicionales
df4 <- df3 %>%
mutate(
es_par = if_else(var1 %% 2 == 0, TRUE, FALSE), # Uso if_else, función condicional: ¿es var1 divisible por 2?
mayor_10 = if_else(var1 > 10, 1, 0), # Función condicional: ¿es var1 mayor a 10?
# Uso case_when - funcion condicional re-clasificación
categoria = case_when(
var1 < 10 ~ "Menor a 10",
var1 >= 10 & var1 < 20 ~ "Entre 10 y 20",
var1 >= 20 ~ "Mayor a 20",
TRUE ~ NA_character_ # Especificar qué pasa si no cumple ninguna condición
)
)
View(df4)
# Aplicacion de filter - selccionar pares y no NA
df5 <- df4 %>% filter(es_par == TRUE)
View(df5)
0^2
# Crear un vector
mi_vector <- c(1, 2, 3, 4, 5, 6) # Vector numerico
mi_vector2 <- 1:5 # Uso : para indicar rango
mi_vector3 <- c(1:6, 10, 15, 20)
mi_vector4 <- c("uno", "dos", "tres", "cuatro", "cinco", "seis") # Vector de caracteres
mi_vector5 <- c(TRUE, FALSE, TRUE, TRUE, FALSE, TRUE) # Vector logico
#Seleccionar elementos dentro del vector
mi_vector4[6]
mi_vector5[c(1, 3, 5)]
# Operaciones con vectores y variables
mi_vector * 4
mi_vector * cuatro
mi_vector3[8]*2
# Limpieza de datos con Dplyr  --------------------------------------------
## Paquete para manipulacion de datos dentro de tidyverse
## permite filtrar, seleccionar, agrupar y calcular de forma simple
# Crear un dataframe
df <- data.frame(mi_vector4, mi_vector, mi_vector5)
View(df)
# Crear un vector
mi_vector <- c(1, 2, 3, 4, 5) # Vector numerico
mi_vector2 <- 1:6 # Uso : para indicar rango
mi_vector3 <- c(1:6, 10, 15, 20)
mi_vector4 <- c("uno", "dos", "tres", "cuatro", "cinco", "seis") # Vector de caracteres
mi_vector5 <- c(TRUE, FALSE, TRUE, TRUE, FALSE, TRUE) # Vector logico
#Seleccionar elementos dentro del vector
mi_vector4[6]
mi_vector5[c(1, 3, 5)]
# Operaciones con vectores y variables
mi_vector * 4
mi_vector * cuatro
mi_vector3[8]*2
# Limpieza de datos con Dplyr  --------------------------------------------
## Paquete para manipulacion de datos dentro de tidyverse
## permite filtrar, seleccionar, agrupar y calcular de forma simple
# Crear un dataframe
df <- data.frame(mi_vector4, mi_vector, mi_vector5)
# Crear un vector
mi_vector <- c(1, 2, 3, 4, 5, 6) # Vector numerico
mi_vector2 <- 1:6 # Uso : para indicar rango
mi_vector3 <- c(1:6, 10, 15, 20)
mi_vector4 <- c("uno", "dos", "tres", "cuatro", "cinco", "seis") # Vector de caracteres
mi_vector5 <- c(TRUE, FALSE, TRUE, TRUE, FALSE, TRUE) # Vector logico
#Seleccionar elementos dentro del vector
mi_vector4[6]
mi_vector5[c(1, 3, 5)]
# Operaciones con vectores y variables
mi_vector * 4
mi_vector * cuatro
mi_vector3[8]*2
# Limpieza de datos con Dplyr  --------------------------------------------
## Paquete para manipulacion de datos dentro de tidyverse
## permite filtrar, seleccionar, agrupar y calcular de forma simple
# Crear un dataframe
df <- data.frame(mi_vector4, mi_vector, mi_vector5)
# Filtrar los datos que no sea NA
vector_prueba <- c(1, 2, NA, 4)
vector_a <- c(1, 2, NA, 4)
df7 <- data_frame(vector_a)
View(df7)
# Filtrar los datos que no sea NA
vector_a <- c(1, 2, NA, 4) %>% data_frame()
View(vector_a)
df7 %>% filter(!is.na(vector_a))
# Filtrar los datos que no sea NA
vector_a <- c(1, 2, NA, 4)
vector_b <- c(TRUE, FALSE, FALSE, TRUE) # Vector logico
df7 <- data_frame(vector_a, vector_b)
df7 %>% filter(!is.na(vector_a))
# Combinar group_by + mutate
df4_rank <- df4 %>%
group_by(es_par) %>%
mutate(
ranking = rank(var1)
)
View(df4_rank)
# Combinar group_by + mutate
df4_rank <- df4 %>%
group_by(es_par) %>%
mutate(
ranking = rank(var1)
) %>%
arrange(es_par, ranking) # Ordenar datos según variable(s)
View(df4_rank)
# Ejemplo uso rank
df4 %>% mutate(rank(var1))
# Combinar group_by + summarise
df4_summ <- df4 %>%
group_by(es_par) %>%
summarise(
media_mv = mean(var1),
media_cuadrado = std(var1)
)
# Combinar group_by + summarise
df4_summ <- df4 %>%
group_by(es_par) %>%
summarise(
media_mv = mean(var1),
media_cuadrado = sd(var1)
)
View(df4_summ)
# Setear directorio local - Cambiar el nombre a la ubicacion de la carpeta de trabajo personal
setwd("C:/Users/CEDEUS 18/Documents/GitHub/Clase5_AnalisisDatos/Data")
# Importar datos como dataframe - usar read.csv2 para data en formato español
escolaridad_csv <- read.csv2("Escolaridad_edad25mas.csv") ## Datos previamente filtrados mayores de 25 anos
View(escolaridad_csv)
# Explorar dataset (proveniente de REDATAM)
head(escolaridad_csv)
# Modificar: variables a minuscula, geocodigo a caracteres
escolaridad <- escolaridad_csv %>%
rename_all(tolower) %>%
mutate(
geocode = as.character(redcode),
region = str_extract(geocode, 1, 2)
) %>%
select(-redcode)
# Modificar: variables a minuscula, geocodigo a caracteres
escolaridad <- escolaridad_csv %>%
rename_all(tolower) %>%
mutate(
geocode = as.character(redcode),
region = str_sub(geocode, 1, 2)
) %>%
select(-redcode)
head(escolaridad)
# Modificar: variables a minuscula, geocodigo a caracteres
escolaridad <- escolaridad_csv %>%
rename_all(tolower) %>%
mutate(
geocode = as.character(redcode),
region = str_sub(geocode, 1, 2), # Manipulacion texto - sustraer caracteres desde geocode en la posición 1 a la 2
comuna = str_sub(geocode, 1, 5)
) %>%
select(-redcode)
head(escolaridad)
# Transformar a formato largo
escolaridad_long <- escolaridad %>%
gather(escolaridad_0:escolaridad_21,
key="a_escolaridad", value = "n_personas"
) %>%
# Extraer el numero de años del nombre de la variable
mutate(
a_escolaridad = str_replace(a_escolaridad, "escolaridad_", ""),
a_escolaridad = as.numeric(a_escolaridad)
) %>%
# Ordenarlo por geocodigo
arrange(geocode)
datos
head(escolaridad_long)
head(escolaridad_media)
# Calcular promedio anos escolaridad por ZC
escolaridad_media <- escolaridad_long %>%
group_by(geocode) %>%
summarise(
total_pers = sum(n_personas),
a_esc_media = sum(n_personas*a_escolaridad)/total_pers
) %>%
# Excluir NAs
filter(!is.na(a_esc_media))
head(escolaridad_media)
# Revisar cuantas regiones tenemos
escolaridad %>% group_by(region) %>%  summarise(n = n())
View(escolaridad)
# Desde el geocode obtenemos la comuna
escolaridad_comuna <- escolaridad_media_zc %>%
mutate(
region = str_sub(geocode, 1, 2), # Manipulacion texto - sustraer caracteres desde geocode en la posición 1 a la 2
comuna = str_sub(geocode, 1, 5)
) %>%
group_by(comuna) %>%
summarise(
pers_comuna = sum(total_personas),
a_esc_media_com = sum(total_personas*a_esc_media)/pers_comuna # promedio ponderado
)
# Calcular promedio anos escolaridad por ZC
escolaridad_media_zc <- escolaridad_long %>%
group_by(geocode) %>%
summarise(
total_pers = sum(n_personas),
a_esc_media = sum(n_personas*a_escolaridad)/total_pers # promedio ponderado
) %>%
# Excluir NAs
filter(!is.na(a_esc_media))
head(escolaridad_media_zc)
# Generalizar: obtener datos de escolaridad promedio por comuna -----------
# Desde el geocode obtenemos la comuna
escolaridad_comuna <- escolaridad_media_zc %>%
mutate(
region = str_sub(geocode, 1, 2), # Manipulacion texto - sustraer caracteres desde geocode en la posición 1 a la 2
comuna = str_sub(geocode, 1, 5)
) %>%
group_by(comuna) %>%
summarise(
pers_comuna = sum(total_personas),
a_esc_media_com = sum(total_personas*a_esc_media)/pers_comuna # promedio ponderado
)
# Desde el geocode obtenemos la comuna
escolaridad_comuna <- escolaridad_media_zc %>%
mutate(
region = str_sub(geocode, 1, 2), # Manipulacion texto - sustraer caracteres desde geocode en la posición 1 a la 2
comuna = str_sub(geocode, 1, 5)
) %>%
group_by(comuna) %>%
summarise(
pers_comuna = sum(total_pers),
a_esc_media_com = sum(total_pers*a_esc_media)/pers_comuna # promedio ponderado
)
head(escolaridad_comuna)
# Revisar cuantas comunas tenemos en nuestra base
escolaridad_comuna %>% group_by(comuna) %>%  summarise(n = n())
# Revisar cuantas comunas tenemos en nuestra base
escolaridad_comuna %>% summarise(n = n())
